renderer
	- stores position of ant into buffer
		- this val is gradually decreased following the same rate
		as the particles which disappear from the grid

OnjectManager? <= NO	

player
	- places down food
	- places down ants



grid
	- stores pheromones
	- stores quick ant refs
	- food
	- walls

visual info
	- ants			- white
	- pheromones	- green/red
	- food			- light green
	- walls			- lighter grey
	- nest			- multiple points
	- background	- black/dark grey
	=> renderer must handle colors too

Flow of information:
	- renderer
		- call func and pass info through that func
			- THIS ONE.
		- renderer has info on initalisation and renderers it
		





Neural netork
	- Remember, you can add inputs into the neural network to
	affect its behaviour
		- You can calculate some stuff for them to promote behaviours
		they exhibits at certain situations.



To make food collision more efficient:
	- Check if
	- more work!

	On initlisation / localenvironment changes
	- each food checks if it's any of its neighbours are not food  
		- if food disappears update surrounding blocks if they're food. Cus they're next
	- WILL NOT WORK IF FOOD HAS MORE SURFACE AREA THAN NUMBER OF ANTS!
		- Thus I will jst go the easy route and have each ant check if they're touching food

Alternative
	- Each ant checks if touching food

Alternative
	- Each cell in current frame gets pushed to array. This arrary

	MAKE SURE ANTS DON'T DUPLICATE FOOD!





`ObjectManager` is more like something that handles the entities/objects of the game.
